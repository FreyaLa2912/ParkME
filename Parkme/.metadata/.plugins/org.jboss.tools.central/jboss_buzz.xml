<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title type="html">Qatar World Cup Goals Statistics Dashboard</title><link rel="alternate" href="https://blog.kie.org/2022/12/qatar-world-cup-goals-statistics-dashboard.html" /><author><name>William Siqueira</name></author><id>https://blog.kie.org/2022/12/qatar-world-cup-goals-statistics-dashboard.html</id><updated>2022-12-16T20:49:04Z</updated><content type="html">In 0.26.0 we introduce Dark Mode, echarts as native library and global properties.  To showcase these features let’s explore a Qatar World Cup 2022 Goal Score dashboard! FIFA WORLD CUP GOALS STATISTICS DASHBOARD The dashboard shows a summary of goals and matches. The cards on top offer an overview of all matches, the 4 charts show different ways of seeing goals: by day, by stadium, weather and by attendance. At the bottom we have a table with all finished matches. THE DATA To build our dashboard we use FIFA REST API. Basically the following URL returns all matches for a given tournament on a given period of time: This URL has a JSON response: Once having the source of data we need to transform it to the format supported by Dashbuilder (a 2d JSON vector). For this we use a expression, which simply select the fields we want and return in a JSON array format and also create a few fields: Finally we can define our datasets in our YAML file and declare all columns that will be used in by the dashboards components: GLOBAL SETTINGS Our dashboards defines some settings that will be shared for all displayer element added to the page: all chart should use a specific color, y axis should have the same label, charts should be resizable, have the same height (300), grids are turned off, export the chart to PNG is enabled and they all consume the same dataset (fifa_matches). For cards (METRIC component) we define a common HTML template. Remember that these properties can be overridden by the component declaration! TOP CARDS The top cards is a simply result of a dataset group operation: * Total Goals: Sum “Total Goals”  * Average Goals by Match: Average operation o “Total Goals” * Average Temperature: Average operation on “Temperature” * Average Attendance: Average operation on “Attendance” All the cards are organized in a row with four columns: CHARTS Charts are in two different rows. The first row contains chart “Goals by Day” line chart, which is match grouped by day, the resulting columns is the day and the average function on columns “Total Goals” The second column contains a “Goals by Stadium” bar chart. It uses matches grouped by stadium and the column used on Y-Axis is also the average of Total goals This is the first row code: On the second row we have two bubble charts. “Goals by Weather” chart has weather on X axis, average number of goals on Y and the bubble size contains the total number of matches that happened on that weather See for that we don’t declare the group function for the columns, instead we use a property that makes it easy to change the whole visualization. By default the group function is AVERAGE. The “Goals by Attendance” chart does not use grouping, instead it shows all matches. The chart bubble size is relative to the match total goals, the x axis is the match name and the y axis is the attendance. Notice that this chart also has support to zoom! MATCHES TABLE Finally we have a table showing all matches. It is not a native component, it is a micro frontend running outside of Dashbuider web bundle! Dashbuilder has a native table, but this external table component is great because it contains filters and order, but it loads all data in memory, so it is recommended to use it with datasets that have &lt; 1k rows. The data for the table does not have grouping, but we format the date. Any javascript could be used to format the data, but we decided to retrieve the day and hour using toLocaleData and toLocateHour. We also format score columns so they won’t show with decimal places. The table is in its own row which has a single column with two components: the “All Matches” title and the table itself: With this we cover the dashboard. Notice that we used most of the improvements that will be in the next Kogito Tooling release. DASHBUILDER 0.26.0 IMPROVEMENTS The version 0.26 has the following main features: * Dark mode * New native chart library: echarts * Global settings for all displayers in the page There are also new features for displayers: * Mode dark can be applied to a specific displayer * Under export users can define a boolean property png  which allow users to * Under general  users can define allowEdit  property so a new button will show a popup with the data displayed in a chart * Also under general users can define a new subTitle for charts. * A new field extraConfiguration allows users to pass a JSON with ECharts Option that will be merged with the displayer options. * Users can now determine the maximum and minimum bubble size in Bubble using properties minBubbleSize and maxBubbleSize under bubble At the time of this writing the 0.26.0 version is not released yet, keep an eye on our blog to see when it is released. If you want to try this version use the nightly build! CONCLUSION In this article we shared a new dashboard built with the 0.26.0 Dashbuilder version. Check the in our . We are preparing a great news story that involves Dashbuilder and Quarkus, so stay tuned! The post appeared first on .</content><dc:creator>William Siqueira</dc:creator></entry><entry><title>Configure a pod security context with Cryostat Operator</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/12/16/configure-pod-security-context-cryostat-operator" /><author><name>Thuan Vo</name></author><id>0c1d8b5f-3f87-410c-bf63-01192ed71f04</id><updated>2022-12-16T07:00:00Z</updated><published>2022-12-16T07:00:00Z</published><summary type="html">&lt;p&gt;Since Kubernetes 1.21, the old PodSecurityPolicy API is being &lt;a href="https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/"&gt;deprecated&lt;/a&gt; and has been removed from versions 1.25 and later. This API will be replaced by the new built-in &lt;a href="https://kubernetes.io/docs/concepts/security/pod-security-admission/"&gt;Pod Security Admission&lt;/a&gt; (PSA), which introduces a new set of &lt;a href="https://kubernetes.io/docs/concepts/security/pod-security-standards/"&gt;Pod Security Standards&lt;/a&gt;. To support these standards, The Red Hat OpenShift Container Platform introduces new &lt;a href="https://docs.openshift.com/container-platform/4.11/authentication/managing-security-context-constraints.html"&gt;security context constraints&lt;/a&gt; (SCC) policies.&lt;/p&gt; &lt;p&gt;With these changes, especially starting with OpenShift 4.12, all namespaces will run in the &lt;a href="https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted"&gt;restricted&lt;/a&gt; mode, and pods must be properly configured under the enforced security standards defined globally or on a namespace level to be admitted to launch. See discussions &lt;a href="https://github.com/redhat-openshift-ecosystem/community-operators-prod/discussions/1417"&gt;here&lt;/a&gt;. This has implications for Cryostat, a container-native JVM application that provides a secure API for profiling and monitoring containers with &lt;a href="https://developers.redhat.com/blog/2020/08/25/get-started-with-jdk-flight-recorder-in-openjdk-8u"&gt;JDK Flight Recorder&lt;/a&gt;, if you're running it on OpenShift.&lt;/p&gt; &lt;h2&gt;Security context defaults&lt;/h2&gt; &lt;p&gt;By default, the &lt;code&gt;restricted&lt;/code&gt; standard is enforced for the operator's deployment and its operands. For the Cryostat application pod, the Operator also selects an &lt;code&gt;fsGroup&lt;/code&gt; to ensure that Cryostat can read and write files in its persistent volume. However, these defaults might not work with your settings. Therefore, in versions 2.2.0 and later of the &lt;a href="https://developers.redhat.com/articles/2022/01/20/install-cryostat-operator-kubernetes-operatorhubio"&gt;Cryostat Operator&lt;/a&gt;, you can configure security contexts for Cryostat workloads.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;To get started, you will need to install Cryostat Operator 2.2.0 on an OpenShift cluster. These steps outlined in this article assume a local OpenShift cluster with Red Hat OpenShift Local (formerly Red Hat CodeReady Containers).&lt;/p&gt; &lt;h2&gt;Configure security contexts via Cryostat CR&lt;/h2&gt; &lt;p&gt;The Cryostat custom resource (CR) property &lt;code&gt;spec.securityOptions&lt;/code&gt; can be set to define security contexts for Cryostat applications, and &lt;code&gt;spec.reportOptions.securityOptions&lt;/code&gt; is for its report sidecar. For example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-yaml"&gt;apiVersion: operator.cryostat.io/v1beta1 kind: Cryostat metadata: name: cryostat-sample spec: securityOptions: podSecurityContext: runAsNonRoot: true seccompProfile: type: RuntimeDefault coreSecurityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL runAsUser: 1001 dataSourceSecurityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL grafanaSecurityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL reportOptions: replicas: 1 podSecurityContext: runAsNonRoot: true seccompProfile: type: RuntimeDefault reportsSecurityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL runAsUser: 1001 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On the OpenShift console, open the &lt;strong&gt;Advanced Configurations&lt;/strong&gt; to set Security Context for the Cryostat application (Figure 1).&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig1_29.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig1_29.png?itok=qNt3CZNE" width="600" height="291" alt="Security context for Cryostat application" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Visit the security context configuration for the Cryostat application. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;For the report sidecar, visit &lt;strong&gt;Report Options&lt;/strong&gt; and then &lt;strong&gt;Advanced Options&lt;/strong&gt; to set the security context (Figure 2).&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig2_21.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig2_21.png?itok=A2840T3H" width="600" height="292" alt="Security context for report sidecard" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: Visit security context configuration for the report sidecar. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;With the introduction of new SCCs, Cryostat workloads must be configured to meet these new security standards. Since Cryostat Operator 2.2.0, the operator, by default, ensures that operand pods meet the &lt;code&gt;restricted&lt;/code&gt; standard. However, you can also define custom security contexts via the Cryostat CR to work with your settings.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/12/16/configure-pod-security-context-cryostat-operator" title="Configure a pod security context with Cryostat Operator"&gt;Configure a pod security context with Cryostat Operator&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Thuan Vo</dc:creator><dc:date>2022-12-16T07:00:00Z</dc:date></entry><entry><title type="html">WildFly 27.0.1 is released!</title><link rel="alternate" href="https://wildfly.org//news/2022/12/16/WildFly2701-Released/" /><author><name>Brian Stansberry</name></author><id>https://wildfly.org//news/2022/12/16/WildFly2701-Released/</id><updated>2022-12-16T00:00:00Z</updated><content type="html">WildFly 27.0.1.Final is now available . It’s been about five weeks since the WildFly 27 release, so we’ve done a small bug fix update, WildFly 27.0.1. This includes an update to WildFly Preview. The following issues were resolved in 27.0.1: BUGS * [] - Wrong exception handling by ManagedScheduledExecutorService.schedule(… ) * [] - Cannot persist ejb timers into database * [] - Distributed TimerService fails when cache is configured with jdbc-store * [] - Custom mail providers are not loaded * [] - NoSuchElementException during scale up under load * [] - Messaging - Transaction remained in prepared state after failover * [] - NPE throws from WSEndpointMetrics COMPONENT UPGRADES * [] - Upgrade RESTEasy Spring to 3.0.0.Final * [] - Upgrade Bootable JAR to 8.1.0.Final * [] - Upgrade Woodstox from 6.2.8 to 6.4.0 (resolves CVE-2022-40152) * [] - Update protobuf to 3.19.6 (resolves CVE-2022-3171) * [] - Upgrade artemis-wildfly-integration to 1.0.7 * [] - Upgrade to Xerces 2.12.0.SP05 * [] - Upgrade HAL to 3.6.5.Final (WildFly 27.0.1.Final) * [] - Upgrade WildFly Core to 19.0.1.Final * [] - Upgrade CXF from 3.5.2-jbossorg-3 to 3.5.2-jbossorg-4 (resolves CVE-2022-46364) Issues resolved in the WildFly Core update included with WildFly 27.0.1 were: BUGS * [] - Unbound SocketChannels do not correctly register with SocketBindingManager * [] - Socket binding "bind-address" and "bind-port" runtime attributes throw NPE if network channel is unbound * [] - Wildfly does not start when non-ascii chars are used in configuration * [] - Disable YAML deserialization in the YAML Configuration Extension COMPONENT UPGRADES * [] - Upgrade byteman to 4.0.20 * [] - Upgrade Jandex to 3.0.3 * [] - Upgrade Bootable JAR to 8.1.0.Final * [] - Upgrade sshd-common from 2.8.0 to 2.9.2 to address CVE-2022-45047 Enjoy!</content><dc:creator>Brian Stansberry</dc:creator></entry><entry><title>How to migrate apps from JBoss EAP 7.x to JBoss EAP 8-Beta</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/12/15/how-migrate-apps-jboss-eap-7x-jboss-eap-8-beta" /><author><name>Philip Hayes</name></author><id>7b5d5200-1a9f-475c-9430-90ba7ebe8926</id><updated>2022-12-15T20:00:00Z</updated><published>2022-12-15T20:00:00Z</published><summary type="html">&lt;p&gt;This article discusses the recent release of the JBoss EAP 8-Beta. We will describe some of the changes introduced by JBoss EAP 8 and demonstrate the steps required to migrate an application from JBoss EAP 7.4 to JBoss EAP 8-Beta.&lt;/p&gt; &lt;p&gt;JBoss EAP 8.0 will provide support for &lt;a href="https://jakarta.ee/release/10/"&gt;Jakarta EE 10&lt;/a&gt;. Jakarta EE 10 brings a huge change to Jakarta EE compared to the Jakarta EE 8 specifications supported by EAP 7. JBoss EAP 8 also introduces changes in the following areas:&lt;/p&gt; &lt;ul&gt;&lt;li aria-level="1"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Removal of Picketbox: &lt;/strong&gt;This has been deprecated since the release of JBoss EAP 6.4. Any legacy security configurations must be migrated to the Elytron security subsystem. EAP users who have already migrated to Elytron don't need to make any changes.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Removal of PicketLink&lt;/strong&gt;: This has been deprecated since the release of JBoss EAP 6.4. Leveraging RH SSO is recommended for the single sign-on functionality previously offered with PicketLink.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Support for OpenID Connect (OIDC)&lt;/strong&gt; will now be provided by the elytron-oidc-client subsystem instead of the separate RH-SSO OIDC adapter.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;SAML support&lt;/strong&gt; is provided by the RH-SSO SAML adapter (Picketlink SAML has been removed). In JBoss EAP 8.0 GA, support for SAML will be provided by a new RH-SSO SAML Galleon Feature Pack.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Hibernate 6.x:&lt;/strong&gt; Read the &lt;a href="https://docs.jboss.org/hibernate/search/6.0/migration/html_single/"&gt;Hibernate Search article&lt;/a&gt; for guidance on migrating from 5.11.x to 6.0.x.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Removal of JDK 8:&lt;/strong&gt; JDK 11 or JDK 17 is now required.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Jolokia and Prometheus removed:&lt;/strong&gt; Red Hat will no longer support these features. JBoss EAP server exposes metrics through the server metrics endpoint: &lt;server address&gt;:&lt;management port&gt;/metrics.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Apache Log4j version 1 APIs&lt;/strong&gt; &lt;strong&gt;removed:&lt;/strong&gt; If your applications do not package log4j.jar and Log4j configuration as part of the application, then you must update them.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;New maven plugin:&lt;/strong&gt; The new eap-maven-plugin uses Galleon technology to build the server based on the layer configuration needed in your application. This results in a reduced size and memory footprint, plus a reduced attack surface. If the JAR impacted by a CVE is not present, EAP will not be vulnerable to the CVE. The JBoss EAP 8 OpenShift images don’t contain EAP runtime binaries like it used to in EAP 6 and EAP 7. This plugin also supports the execution of JBoss EAP CLI script files to customize your server configuration. OpenShift Source to Image builds (S2I) incorporate this change and have been redesigned to leverage the eap-maven-plugin to create the server. You can find more information in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/8.0-beta/"&gt;documentation&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Bridge deploy fail:&lt;/strong&gt; Previously, if a bridge were misconfigured, you wouldn’t know until you tried to use it. Now, the bridge will fail when added if it fails to deploy.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Refer to the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/8-beta/html/release_notes_for_red_hat_jboss_enterprise_application_platform_8.0_beta/index"&gt;release notes&lt;/a&gt; for more information about the changes introduced in this beta release.&lt;/p&gt; &lt;h2&gt;Migrating from JBoss EAP 7.4 to JBoss EAP 8-Beta&lt;/h2&gt; &lt;p&gt;Moving applications from JBoss EAP 7.4 to JBoss EAP 8.0 Beta will require code changes (due to the move from Jakarta EE 8 to Jakarta EE 10 (e.g., converting from the “javax” namespace to “jakarta” namespace). These changes are documented in &lt;a href="https://access.redhat.com/articles/6980265"&gt;this article&lt;/a&gt;. To help our customers with this migration effort, engineers at Red Hat have been busy updating our tools: the &lt;a href="https://developers.redhat.com/products/mta/download"&gt;Migration Toolkit for Applications&lt;/a&gt;, including the Migration Toolkit for Runtimes (MTR, for non-OpenShift projects) and the JBoss EAP Server Migration tool. In this article, we will use these tools to help migrate an application from JBoss EAP 7.4 to JBoss EAP 8-Beta. &lt;/p&gt; &lt;p&gt;We will focus on two areas: the code changes required, identified by the latest version of the MTR tool, and the configuration changes to our standalone.xml file.&lt;/p&gt; &lt;p&gt;We will use an application based on the JBoss EAP 7.4 quickstarts with some modifications to connect to a MySQL database. This will allow us to validate the conversion of modules and drivers. You can refer to the &lt;a href="https://github.com/deewhyweb/eap-quickstarts/tree/7.4.x/kitchensink"&gt;source code&lt;/a&gt; for this application.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;Before starting, we will set up an instance of JBoss EAP 7.4 with a running application. This will help demonstrate the server configuration migration process.  &lt;/p&gt; &lt;p&gt;We will use the JBoss EAP 7.4 quickstarts kitchensink application with some modifications as follows:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The application has been updated to connect to a MySQL database. This will allow us to test the migration of J2EE modules and drivers.&lt;/li&gt; &lt;li&gt;Java Server Faces has been updated from version 2.2 to 2.3, as described in the &lt;a href="https://access.redhat.com/solutions/6982900"&gt;KCS article&lt;/a&gt;. &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;We can use Podman or Docker to run an instance of MySQL with the correct configuration with the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;podman run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=eap mysql&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/eap/download"&gt;Download&lt;/a&gt; the JBoss EAP 7.4 zip distribution. Extract the distribution into a local folder (e.g., ~/jboss-eap-74). If you don’t already have a Red Hat account, you need to create one before you can log in to download this archive.&lt;/p&gt; &lt;p&gt;Set the EAP_HOME environment variable.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;export EAP_HOME=~/jboss-eap-74&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can start JBoss EAP 7.4 with the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$EAP_HOME/bin/standalone.sh&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Check out this &lt;a href="https://github.com/deewhyweb/eap-quickstarts.git"&gt;example application&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Change the directory into the eap-quickstarts/kitchensink folder.&lt;/p&gt; &lt;p&gt;Copy the contents of the modules folder to the ~/jboss-eap-74/modules folder.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;cp -r modules/* $EAP_HOME/modules&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run the JBoss EAP CLI:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$EAP_HOME/bin/jboss-cli.sh –-connect&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;From the JBoss CLI, enter the following commands to configure the MySQL driver and data source:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;/subsystem=datasources/jdbc-driver=mysql:add(driver-name=mysql,driver-module-name=com.mysql) data-source add --name=mysql --jndi-name=java:/jdbc/mysql --driver-name=mysql --connection-url=jdbc:mysql://127.0.0.1:3306/eap --user-name=root --password=root&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Build and deploy the application to JBoss EAP 7.4 with maven:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;mvn clean install wildfly:deploy&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once this application is deployed successfully, we should be able to access it here: &lt;a href="http://127.0.0.1:8080/kitchensink"&gt;http://127.0.0.1:8080/kitchensink&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We now have a running instance of our application running in JBoss EAP 7.4 ready to migrate to JBoss EAP 8.0 Beta. Before starting the migration, shut down the JBoss EAP 7.4 server and create an environment variable pointing to the JBoss EAP 7.4 deployment.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;export EAP_PREVIOUS_HOME=~/jboss-eap-74&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Download the JBoss EAP 8-Beta distribution &lt;a href="https://developers.redhat.com/products/eap/download"&gt;here&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Extract the distribution into a local folder (e.g., ~/jboss-eap-8).  &lt;/p&gt; &lt;p&gt;Set the EAP_HOME environment variable as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;export EAP_HOME=~/jboss-eap-8&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now we can move on to the migration from JBoss EAP 7.4 to JBoss EAP 8.0 Beta.&lt;/p&gt; &lt;h2&gt;Server configuration changes&lt;/h2&gt; &lt;p&gt;When we deployed our application to JBoss EAP 7.4, we made some changes to the server configuration to add a module and driver to connect to MySQL. We must ensure these modules and drivers are in place and working correctly in our JBoss EAP 8-Beta server. We can use the JBoss EAP server migration tool to perform this migration for us.  &lt;/p&gt; &lt;p&gt;Download the server migration tool from this &lt;a href="https://developers.redhat.com/products/eap/download"&gt;link&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Extract the archive to a local folder and change into the new directory. Run the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;./jboss-server-migration.sh -s $EAP_PREVIOUS_HOME -t $EAP_HOME&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The server migration tool will ask a series of questions during the migration process:&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;---- JBoss Server Migration Tool -----------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Retrieving servers...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO SOURCE server name: JBoss EAP, version: 7.4.0.GA.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO TARGET server name: JBoss EAP, version: 8.0.0.Beta.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Server migration starting...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO --- Migrating modules requested by environment...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO No modules to migrate.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate the source's standalone server?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;yes&lt;/strong&gt; to migrate the standalone configuration.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO --- Migrating standalone server...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Source's standalone content migrated.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Source's standalone configurations found: [standalone-full-ha.xml, standalone-full.xml, standalone-ha.xml, standalone-load-balancer.xml, standalone.xml]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate all configurations?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no? &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;no&lt;/strong&gt;. We want to select the configurations to migrate.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate configuration standalone-full-ha.xml ?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no? &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;no&lt;/strong&gt;. We don’t want to migrate standalone-full-ha.xml.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate configuration standalone-full.xml ?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no? &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;no&lt;/strong&gt;. We don’t want to migrate standalone-full.xml&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate configuration standalone-ha.xml ?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no? &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;no&lt;/strong&gt;. We don’t want to migrate standalone-ha.xml.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate configuration standalone-load-balancer.xml ?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no? &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;no&lt;/strong&gt;. We don’t want to migrate standalone-load-balancer.xml.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate configuration standalone.xml ?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no? &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;yes&lt;/strong&gt;. We want to migrate standalone.xml.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Migrating standalone configuration standalone.xml...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; WARN Migration of legacy security domain jboss-web-policy's authorization is not supported and will be ignored.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; WARN Migration of legacy security domain jaspitest's authentication-jaspi is not supported and will be ignored.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; WARN Migration of legacy security domain jboss-ejb-policy's authorization is not supported and will be ignored.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Legacy security XML configuration retrieved.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Unsupported extensions removed: [org.jboss.as.security]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Unsupported subsystems removed: [urn:jboss:domain:security:2.0]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Referenced paths migrated.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Legacy security realms removed from XML configuration.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;WARNING: An illegal reflective access operation has occurred&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;WARNING: Illegal reflective access by org.wildfly.extension.elytron.SSLDefinitions (jar:file:/home/philip/Downloads/wildfly-ee-dist-8.0.0.Beta-redhat-00002/jboss-eap-8.0/modules/system/layers/base/org/wildfly/extension/elytron/main/wildfly-elytron-integration-jakarta-19.0.0.Beta16-redhat-00004.jar!/) to method com.sun.net.ssl.internal.ssl.Provider.isFIPS()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;WARNING: Please consider reporting this to the maintainers of org.wildfly.extension.elytron.SSLDefinitions&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;WARNING: All illegal access operations will be denied in a future release&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Legacy security realm ManagementRealm migrated to Elytron.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Legacy security realm ApplicationRealm migrated to Elytron.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO Legacy security domain other migrated to Elytron.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Migrate the source's managed domain?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;yes/no?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Choose &lt;strong&gt;no&lt;/strong&gt;. We are not using a managed domain.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Server migration done.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; INFO &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; Task Summary&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; server .......................................................................................... SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; standalone ..................................................................................... SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content-dir ....................................................... SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content(path=7d/975dfd92d3b7a35f48054ad2190bdf7ebbeb3b/content) .. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content(path=b5/fe70630a477a851f755cc04eb5cc3030bb02db/content) .. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content(path=92/2cdbb0d087989ad5e6ecbd3c0123a34def19b7/content) .. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content(path=14/99d19995fc5835cb1c07eed113447b4fb46c4e/content) .. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content(path=3d/25c8107fcc4cf82f234dcf6ad5b8e926e7ec18/content) .. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content(path=45/9834b7318bd81b320829432fdef5a77bf93a19/content) .. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; contents.standalone.migrate-content(path=38/c53e35a6ab9d8a40016a5429f7115ff94e3ce7/content) .. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; standalone-configurations ..................................................................... SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; standalone-configuration(source=standalone.xml) .............................................. SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; Migration Result: SUCCESS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;----------------------------------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Once this operation completes, we can start our JBoss EAP 8.0 server with the following command from the JBoss EAP installation folder:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;./bin/standalone.sh &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When the server has started successfully, we can test our configuration with the following commands:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;./jboss-cli.sh --connect&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;/subsystem=datasources:installed-drivers-list&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output should show the MySQL driver as follows:&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "outcome" =&gt; "success",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "result" =&gt; [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "driver-name" =&gt; "mysql",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "deployment-name" =&gt; undefined,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "driver-module-name" =&gt; "com.mysql",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "module-slot" =&gt; "main",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "driver-datasource-class-name" =&gt; "",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "driver-xa-datasource-class-name" =&gt; "",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "datasource-class-info" =&gt; undefined,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "driver-class-name" =&gt; "com.mysql.cj.jdbc.Driver",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "driver-major-version" =&gt; 8,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "driver-minor-version" =&gt; 0,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "jdbc-compliant" =&gt; false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; }&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;We can also test our datasource connection with the following JBoss CLI command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;/subsystem=datasources/data-source=mysql:test-connection-in-pool&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A successful connection should result in the following response:&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "outcome" =&gt; "success",&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; "result" =&gt; [true]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;We can now be confident our application will have the required drivers and data sources present, so we can move on to the code analysis section.&lt;/p&gt; &lt;h2&gt;Code analysis&lt;/h2&gt; &lt;p&gt;To perform code analysis of our JBoss EAP 7.4 application, we will use the latest version of the Migration Toolkit for Runtimes. We can download this tool from &lt;a href="https://developers.redhat.com/products/mtr/download"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We launch the MTR tool with the following command:  ./run_windup.sh, then navigate to: http://127.0.0.1:8080/windup-ui. &lt;/p&gt; &lt;p&gt;From the MTR landing page (Figure 1), click on &lt;strong&gt;Create Project&lt;/strong&gt;.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/Jboss-migration-Fig1.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/Jboss-migration-Fig1.png?itok=TAqzvywQ" width="600" height="318" alt="Migration Toolkit start page." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Migration Toolkit for applications start page. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;Enter a project name (e.g., eap7-eap8) and click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Then, we need to upload an artifact to analyze (Figure 2).&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/Jboss-migration-fig2.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/Jboss-migration-fig2.png?itok=9QTyuX6N" width="600" height="318" alt="Migration Toolkit add artifact page." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: Migration Toolkit for Applications add artifact. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;We locate a build of our application in the form of a WAR file and upload it via the web console. The WAR file will be in the eap-quickstarts/kitchensink/target folder.&lt;/p&gt; &lt;p&gt;Click on &lt;strong&gt;Next&lt;/strong&gt; to progress to the next stage.&lt;/p&gt; &lt;p&gt;Now select the transformation target (Figure 3): select “eap8” from the “Application server migration to EAP 7” box.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/Jboss-migration-Fig3.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/Jboss-migration-Fig3.jpg?itok=qpdflG-M" width="600" height="317" alt="Migration Toolkit select target page." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3: Migration Toolkit for Applications select target page. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt; to continue.&lt;/p&gt; &lt;p&gt;From the next screen, add &lt;strong&gt;org&lt;/strong&gt; to the list of selected packages and click on &lt;strong&gt;Next.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Click through the pages that follow and then select &lt;strong&gt;Save and Run&lt;/strong&gt; to start the analysis. When the analysis finishes, click on the graph symbol on the right of the analysis list row to load the report.&lt;/p&gt; &lt;p&gt;You will see from the report the tool is estimating 87 story points to migrate this application. The estimation of story points does not relate to time (e.g., hours or days). It’s more of an indication to measure against reports from other analyses. Click on &lt;strong&gt;kitchensink.war&lt;/strong&gt; to view the details of the issues to be addressed (Figure 4).&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jboss-migration-fig4.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/jboss-migration-fig4.jpg?itok=UVZl-6SP" width="600" height="303" alt="Migration Toolkit dashboard view." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4: Migration Toolkit for Applications dashboard view. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;From the dashboard view, click on the &lt;strong&gt;Issues&lt;/strong&gt; tab to view the list of incidents to resolve.&lt;/p&gt; &lt;p&gt;For this article, we will focus on the &lt;strong&gt;Migration Mandatory&lt;/strong&gt; items (Figure 5).&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jboss-migration-fig5.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/jboss-migration-fig5.jpg?itok=cH6xpELE" width="600" height="319" alt="Migration Toolkit issues list page." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 5: Migration Toolkit for Applications issues list. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;The results from this analysis are in line with our expectations (i.e., changing “javax” references to “jakarta”). Some other changes are also highlighted (e.g., our application uses Java Server Faces). So we need to update the version to match the JBoss EAP 8-Beta version.&lt;/p&gt; &lt;p&gt;We can choose to either go through these items individually and make the code changes manually or use a tool like &lt;a href="https://docs.openrewrite.org/"&gt;Openrewrite&lt;/a&gt; to automate these changes. For guidance on using Openrewrite to migrate from Java EE 8 to Jakarta EE 9, refer to this &lt;a href="https://windup.github.io/blog/javax-jakarta-openrewrite-automigrate/"&gt;article&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;One of the changes listed on the report is to update a dependency in the pom.xml file illustrated in Figure 6:&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jboss-migration-fig6.jpg" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/jboss-migration-fig6.jpg?itok=iMH5JhcM" width="600" height="173" alt="Migration Toolkit code change example." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 6: Migration Toolkit for Applications code change example. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;In our example, in addition to changing the groupId and artifactId, we will need to change the version.server.bom property. In the pom.xml replace the following:&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;version.server.bom&gt;7.4.0.GA&lt;/version.server.bom&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;with:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;version.server.bom&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;8.0.0.Beta-redhat-00004&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/version.server.bom&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Because this guide relates to a beta release of JBoss EAP, we need to add the early access maven repositories to our project.  This will not be required for the GA release, therefore, is not covered by the migration toolkit rules.  To add these repositories, add the following to the repositories block in the pom.xml file.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&lt;repository&gt; &lt;id&gt;redhat-ea-maven-repository&lt;/id&gt; &lt;name&gt;Red Hat Early Access Maven Repository&lt;/name&gt; &lt;url&gt;https://maven.repository.redhat.com/earlyaccess/all/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;/snapshots&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once all these changes have been made, we should be able to build and deploy our application to JBoss EAP 8-Beta. To do this, with our JBoss EAP 8-Beta  server running, run the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;mvn clean install wildfly:deploy&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once the maven process completes, our application should be available at &lt;a href="http://127.0.0.1:8080/kitchensink"&gt;http://127.0.0.1:8080/kitchensink&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Success! Our JBoss EAP 7.4 application and server configuration are now fully migrated to JBoss EAP 8-Beta.&lt;/p&gt; &lt;h2&gt;JBoss EAP 8-Beta release&lt;/h2&gt; &lt;p&gt;In this article, we described the key changes introduced with the beta release of JBoss EAP 8.0. We used the server migration tool to perform the changes necessary to move the configuration from JBoss EAP 7.4.0 to JBoss EAP 8.0. We used the Migration Toolkit for Applications to provide guidance on the code changes required to move from Jakarta EE 8 to Jakarta EE 10.&lt;/p&gt; &lt;p&gt;Here is a list of some useful links relating to the JBoss EAP Beta release:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/8.0-beta/"&gt;JBoss EAP 8-Beta Release notes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/eap/download"&gt;JBoss EAP 8-Beta Download&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/mta/overview"&gt;Migration Toolkit for Applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/eap/download"&gt;JBoss Server Migration tool Download&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/articles/6980265"&gt;Red Hat JBoss EAP Application Migration from Jakarta EE 8 to EE 10&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://docs.jboss.org/hibernate/search/6.0/migration/html_single/"&gt;Hibernate migration guide from 5.11&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=u9N-T-uD_KU"&gt;Migration Toolkit for applications overview video&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/12/15/how-migrate-apps-jboss-eap-7x-jboss-eap-8-beta" title="How to migrate apps from JBoss EAP 7.x to JBoss EAP 8-Beta"&gt;How to migrate apps from JBoss EAP 7.x to JBoss EAP 8-Beta&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Philip Hayes</dc:creator><dc:date>2022-12-15T20:00:00Z</dc:date></entry><entry><title>How to easily migrate a legacy application to OpenShift</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/12/15/migrate-legacy-application-openshift" /><author><name>Chandler Wilkerson</name></author><id>e7b6cb4c-eebb-450b-90de-17d4fd96f3fc</id><updated>2022-12-15T07:00:00Z</updated><published>2022-12-15T07:00:00Z</published><summary type="html">&lt;p&gt;This article is for developers who want to code, test, and build applications according to the most versatile and powerful modern techniques in software engineering. Perhaps you have read the &lt;a href="http://agilemanifesto.org/"&gt;Agile Software Development Manifesto&lt;/a&gt;, embraced the &lt;a href="https://www.redhat.com/en/topics/devops"&gt;DevOps Culture&lt;/a&gt;, and even started down the &lt;a href="https://developers.redhat.com/e-books/path-gitops"&gt;Path to GitOps&lt;/a&gt; as a way of putting the first two documents into practice. This path is a great way to handle future green-field projects, but what about existing applications that might not have had the benefit of being launched in the age of DevOps?&lt;/p&gt; &lt;p&gt;We will look at a compelling use case that led to the development of &lt;a href="https://kubevirt.io"&gt;KubeVirt&lt;/a&gt;, the upstream open source project behind &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; Virtualization.&lt;/p&gt; &lt;p&gt;Red Hat OpenShift Virtualization is an Operator-based add-on available to anybody with a Red Hat OpenShift Container Platform subscription. Through OpenShift Virtualization, you can add virtual machines (VMs) as custom resources with their own controller and API server. The VMs are based on the same KVM technology used to run virtual machines on &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; and Red Hat Virtualization. But in OpenShift, the VMs are encapsulated in &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; pods.&lt;/p&gt; &lt;p&gt;&lt;code&gt;VirtualMachines&lt;/code&gt; in OpenShift are located in this pod layer and can be labeled, annotated, and targeted as endpoints just like any pod in the cluster.&lt;/p&gt; &lt;h2&gt;Bookinfo example&lt;/h2&gt; &lt;p&gt;For the purpose of this article, we will cheat a little bit and select an application already written as a collection of microservices, then install that application on a VM as our target for modernization. The application we're using is the Istio project's &lt;a href="https://github.com/istio/istio/tree/master/samples/bookinfo"&gt;bookinfo sample app&lt;/a&gt;. Stitched together from a collection of different services, the app displays information about an example book.&lt;/p&gt; &lt;p&gt;Bookinfo contains four different services, all written in different languages. The &lt;code&gt;productpage&lt;/code&gt; service displays the main application and calls two other services, &lt;code&gt;details&lt;/code&gt; and &lt;code&gt;reviews&lt;/code&gt;. Information about books is stored by the &lt;code&gt;details&lt;/code&gt; service. The &lt;code&gt;reviews&lt;/code&gt; service provides a pair of short reader reviews of the sample book and further calls the &lt;code&gt;ratings&lt;/code&gt; service to provide a 1-5 star rating for each review.&lt;/p&gt; &lt;p&gt;As a microservices-based application, the different services refer to each other by name and expect to find all services listening on port 9080. To install the app on a single VM, a little code modification is required to change three of the services from the default 9080 port. The changes to do this are in &lt;a href="https://github.com/cwilkers/istio/tree/bookinfo-vmhack/samples/bookinfo/src"&gt;a fork of the istio repository&lt;/a&gt;. Using environment variables and systemd unit files, all four services can be set up in a self-contained manner on one Fedora virtual machine to play the part of our legacy application.&lt;/p&gt; &lt;h2&gt;Virtual legacy versus microservices&lt;/h2&gt; &lt;p&gt;As noted earlier, a VM running in an OpenShift cluster is reachable in much the same manner as any deployment or pod in the cluster. The &lt;code&gt;VirtualMachine&lt;/code&gt; configuration follows:&lt;/p&gt; &lt;pre&gt;&lt;code class="yaml"&gt;apiVersion: kubevirt.io/v1 kind: VirtualMachine metadata: name: bookinfo-legacy spec: running: true template: metadata: annotations: vm.kubevirt.io/os: fedora vm.kubevirt.io/workload: server labels: kubevirt.io/domain: bookinfo-legacy vm.kubevirt.io/name: bookinfo-legacy app: bookinfo-legacy spec: domain: cpu: cores: 1 sockets: 1 threads: 1 devices: disks: - bootOrder: 1 disk: bus: virtio name: rootdisk interfaces: - masquerade: {} name: default networkInterfaceMultiqueue: true rng: {} features: acpi: {} smm: enabled: true firmware: bootloader: efi: {} machine: type: pc-q35-rhel8.6.0 resources: requests: memory: 1Gi evictionStrategy: LiveMigrate hostname: bookinfo-legacy networks: - name: default pod: {} terminationGracePeriodSeconds: 180 volumes: - dataVolume: name: bookinfo-rootdisk name: rootdisk &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To target the bookinfo-legacy VM from within the cluster, use a &lt;code&gt;Service&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="yaml"&gt;apiVersion: v1 kind: Service metadata: name: productpage labels: app: productpage service: productpage spec: ports: - port: 9080 name: http selector: app: bookinfo-legacy &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, to expose the &lt;code&gt;Service&lt;/code&gt; outside the cluster, you need a &lt;code&gt;Route&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="yaml"&gt;apiVersion: route.openshift.io/v1 kind: Route metadata: name: productpage spec: port: targetPort: 9080 to: kind: Service name: productpage weight: 100 wildcardPolicy: None &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If everything goes right, you should have a working website that shows a product page for the Shakespeare play, &lt;em&gt;Comedy of Errors&lt;/em&gt;. Under the title and summary are two sections: &lt;strong&gt;Book Details&lt;/strong&gt;, which displays metadata such as ISBN and publisher, and &lt;strong&gt;Book Reviews&lt;/strong&gt; with a pair of blurbs and one-to-five star ratings.&lt;/p&gt; &lt;h2&gt;GitOps for the win&lt;/h2&gt; &lt;p&gt;Once you complete the manual work of setting up the VM, it is a good idea to take a snapshot of the working configuration and place the disk image someplace where it can easily be cloned to create new instances.&lt;/p&gt; &lt;p&gt;In OpenShift Virtualization, this procedure is as simple as using a &lt;code&gt;DataVolume&lt;/code&gt; (DV) to copy the VM's root disk to the &lt;code&gt;openshift-virtualization-os-images&lt;/code&gt; namespace. An example follows of a DV that copies the image from the &lt;code&gt;bookinfo&lt;/code&gt; namespace to the &lt;code&gt;openshift-virtualization-os-images&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;&lt;code class="yaml"&gt;apiVersion: cdi.kubevirt.io/v1beta1 kind: DataVolume metadata: name: bookinfo namespace: openshift-virtualization-os-images annotations: cdi.kubevirt.io/storage.bind.immediate.requested: "true" kubevirt.ui/provider: Fedora spec: source: pvc: namespace: bookinfo name: bookinfo-rootdisk storage: accessModes: - ReadWriteMany resources: requests: storage: 20Gi &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once the VM's disk image is available for cloning, you can create a Git repository and a corresponding Argo CD Application under Red Hat OpenShift GitOps. The DV for the bookinfo-legacy VM demonstrated in this article employs a different image source from the one we just built. The new DV targets a local HTTP server running as a container on a management node next to the OpenShift cluster.&lt;/p&gt; &lt;p&gt;This is a good place to experiment with different DataVolume sources, whether a clone of a PVC, a downloaded &lt;a href="https://alt.fedoraproject.org/cloud/"&gt;Fedora cloud image&lt;/a&gt; or even a container image.&lt;/p&gt; &lt;p&gt;An example repository is available under a &lt;a href="https://github.com/cwilkers/gitopscon22"&gt;repository created for GitOpsCon NA 2022&lt;/a&gt;. (This article is based on a talk at GitOpsCon, an event co-located with KubeCon and CloudNative Con NA 2022.)&lt;/p&gt; &lt;p&gt;The &lt;code&gt;gitopscon22&lt;/code&gt; repository is laid out in a standard &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/"&gt;Kustomization&lt;/a&gt; pattern, with &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;overlays&lt;/code&gt; directories. To run through the demonstration for the application migration, tags are used to advance through the commit log, and the Argo CD Application specifies a particular tag such as &lt;code&gt;dev&lt;/code&gt; or &lt;code&gt;prod&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Starting at commit &lt;a href="https://github.com/cwilkers/gitopscon22/commit/7480090f395ddd594d82e9a55890bbe8ae08a2c4"&gt;7480090&lt;/a&gt;, there is a running VM with its DV, a set of &lt;code&gt;Service&lt;/code&gt; resources, and a &lt;code&gt;Route&lt;/code&gt;. Earlier, I described the &lt;code&gt;Route&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt; for &lt;code&gt;productpage&lt;/code&gt;. The remainder of the services currently exists to redirect individual components of the bookinfo app to their constituent TCP ports on the VM.&lt;/p&gt; &lt;h2&gt;The first migration&lt;/h2&gt; &lt;p&gt;At this point in the demo, we simulate a few sprints worth of work and rewrite the application's landing page as a microservice. You can find the new &lt;code&gt;productpage&lt;/code&gt; deployment in commit &lt;a href="https://github.com/cwilkers/gitopscon22/commit/c616a607aa00c43e1b0cf60e165b734e0292864a"&gt;c616a60&lt;/a&gt;. Notable differences here include the addition of &lt;code&gt;productpage.yaml&lt;/code&gt; to our base &lt;code&gt;kustomization.yaml&lt;/code&gt; configuration file and a change in the application selector for the &lt;code&gt;productpage&lt;/code&gt; service:&lt;/p&gt; &lt;pre&gt;&lt;code class="diff"&gt;@@ -56,4 +56,4 @@ spec: ￼ - port: 9080 ￼ name: http ￼ selector: - app: bookinfo-legacy + app: productpage &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To demonstrate the benefit of using GitOps to determine which code gets deployed in the development and production environments, force push an update to the &lt;code&gt;dev&lt;/code&gt; tag. The update then gets deployed by Red Hat OpenShift GitOps to the development environment:&lt;/p&gt; &lt;pre&gt;&lt;code class="bash"&gt;$ git tag -f dev c616a60 Updated tag 'dev' (was 7480090) $ git push -f --tags Total 0 (delta 0), reused 0 (delta 0), pack-reused 0 To github.com:cwilkers/gitopscon22.git + 7480090...c616a60 dev -&gt; dev (forced update) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you encounter any issues, you can fix them in &lt;code&gt;dev&lt;/code&gt; before being pushed to &lt;code&gt;prod&lt;/code&gt;. Once the update goes through (it might require a refresh on the Argo CD side), you can verify that the &lt;code&gt;productpage&lt;/code&gt; service is now selecting &lt;code&gt;app=productpage&lt;/code&gt; instead of &lt;code&gt;app=bookinfo-legacy&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="bash"&gt;$ oc get svc -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR details ClusterIP 172.30.231.130 &lt;none&gt; 9080/TCP 35d app=bookinfo-legacy productpage ClusterIP 172.30.8.204 &lt;none&gt; 9080/TCP 35d app=productpage ratings ClusterIP 172.30.83.87 &lt;none&gt; 9080/TCP 35d app=bookinfo-legacy reviews ClusterIP 172.30.108.78 &lt;none&gt; 9080/TCP 35d app=bookinfo-legacy &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;More importantly, you can check that the endpoints have changed:&lt;/p&gt; &lt;pre&gt;&lt;code class="bash"&gt;$ oc get endpoints NAME ENDPOINTS AGE details 10.129.2.62:9081 35d productpage 10.131.0.149:9080 35d ratings 10.129.2.62:9083 35d reviews 10.129.2.62:9082 35d &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This output shows that the &lt;code&gt;productpage&lt;/code&gt; service points to a different service IP address from the one used by the rest of the services. Moreover, the &lt;code&gt;details&lt;/code&gt;, &lt;code&gt;ratings&lt;/code&gt;, and &lt;code&gt;reviews&lt;/code&gt; endpoints have different port numbers. The different ports spring from the changes made to the bookinfo application's microservices. They originally all listened on port 9080, but to play nicely together in a VM, they must listen on distinct TCP ports.&lt;/p&gt; &lt;h2&gt;The migrated application&lt;/h2&gt; &lt;p&gt;Much like the instructions on a shampoo bottle, rinse and repeat. There is no need to explicitly go through the steps for the remaining services here. If you follow the &lt;a href="https://github.com/cwilkers/gitopscon22/commits/main"&gt;repository commits page&lt;/a&gt;, you can find commits adding &lt;a href="https://github.com/cwilkers/gitopscon22/commit/4f9f5892173866a28da0008d098d8fe77e186272"&gt;details&lt;/a&gt;, &lt;a href="https://github.com/cwilkers/gitopscon22/commit/0a0ef1f473dab1d685c4e6d75224884a788afbed"&gt;reviews&lt;/a&gt;, and &lt;a href="https://github.com/cwilkers/gitopscon22/commit/1c7a3ae054bef5a81c4fc0c13a96500ec4055d9f"&gt;ratings&lt;/a&gt; microservices.&lt;/p&gt; &lt;p&gt;With the last commit of the &lt;code&gt;ratings&lt;/code&gt; service, the application is fully migrated. All services point at the results of deployments, not the virtual machine, and the old &lt;code&gt;bookinfo-legacy&lt;/code&gt; VM is now redundant. Commit &lt;a href="https://github.com/cwilkers/gitopscon22/commit/ddb47610a99da957ecb28472db1cabd8c72520e6"&gt;ddb4761&lt;/a&gt; changes the VM definition to &lt;code&gt;running: false&lt;/code&gt;, which causes the legacy application to shut down.&lt;/p&gt; &lt;p&gt;After testing, promotion to production, etc., you can delete the VM's YAML from the Git repository and tell OpenShift GitOps to prune the repository during its next sync operation.&lt;/p&gt; &lt;h2&gt;GitOps for new and legacy applications&lt;/h2&gt; &lt;p&gt;Hopefully, this article will encourage teams with complicated legacy applications to try a migration to OpenShift. Whether the teams take on a full application migration journey from top to bottom, as demonstrated here, or use the platform's capabilities to develop new applications alongside old ones, OpenShift is a great place to give those legacy applications new life.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/12/15/migrate-legacy-application-openshift" title="How to easily migrate a legacy application to OpenShift"&gt;How to easily migrate a legacy application to OpenShift&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Chandler Wilkerson</dc:creator><dc:date>2022-12-15T07:00:00Z</dc:date></entry><entry><title>Quarkus Newsletter #27 - December</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-newsletter-27/&#xA;            " /><author><name>James Cobb (https://twitter.com/insectengine)</name></author><id>https://quarkus.io/blog/quarkus-newsletter-27/</id><updated>2022-12-15T00:00:00Z</updated><published>2022-12-15T00:00:00Z</published><summary type="html">The year is fast coming to a close so it’s time for the December newsletter! Learn some common inner-loop development cycle challenges and solutions in Eric Deandrea’s "Kubernetes-native inner loop development with Quarkus" article. Find out Pierre Guimon’s approach for migrating a substantial Spring boot code base application to Quarkus...</summary><dc:creator>James Cobb (https://twitter.com/insectengine)</dc:creator><dc:date>2022-12-15T00:00:00Z</dc:date></entry><entry><title type="html">How to run Spring Boot applications on WildFly</title><link rel="alternate" href="http://www.mastertheboss.com/jboss-frameworks/spring/spring-boot-hello-world-on-wildfly/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/jboss-frameworks/spring/spring-boot-hello-world-on-wildfly/</id><updated>2022-12-14T08:41:00Z</updated><content type="html">This updated article shows how to deploy Spring Boot 3 / Spring Boot 2 applications on top of WildFly application server as Web application archives (war). We will start by setting up the application with Spring Boot Initializr. Then, we will apply the configuration changes to deploy the application on WildFly. Spring Boot offers a ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>How we addressed an unforeseen use case in pthread_atfork()</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/12/14/how-we-addressed-unforeseen-use-case-pthreadatfork" /><author><name>Arjun Shankar</name></author><id>cf3d686d-7428-428d-8648-09b67590f46c</id><updated>2022-12-14T07:00:00Z</updated><published>2022-12-14T07:00:00Z</published><summary type="html">&lt;p&gt;While the &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/"&gt;POSIX&lt;/a&gt; standards specified by IEEE form the basis of compatibility between various operating systems and the portability of application code, sometimes unforeseen use cases can exercise an implementation in surprising ways and make us think about whether the interface itself could benefit from a more thorough specification.&lt;/p&gt; &lt;p&gt;As a member of Red Hat's Platform Tools team, I recently had the chance to witness and participate in the &lt;a href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt; developer community's encounter with one such situation. As we worked on triaging and fixing what at first glance seemed to be a regression in the implementation of &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_atfork.html"&gt;pthread_atfork()&lt;/a&gt;, it soon became apparent that the interface might benefit from a more thorough treatment in its specification than it does already.&lt;/p&gt; &lt;h2&gt;pthread_atfork(): What it does and why it does it&lt;/h2&gt; &lt;p&gt;&lt;code&gt;pthread_atfork()&lt;/code&gt; is used by applications to set up &lt;em&gt;fork handlers&lt;/em&gt;—that is, functions that are called before and after processing a call to &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html"&gt;fork()&lt;/a&gt;. It is possible to register multiple sets of handlers, one for each call to &lt;code&gt;pthread_atfork()&lt;/code&gt;. Later, when &lt;code&gt;fork()&lt;/code&gt; is called, the runtime first executes the prepare handlers in the reverse order of registration, then processes the fork itself. After forking, the runtime executes the parent and child handlers in the corresponding processes, this time in the order of registration.&lt;/p&gt; &lt;p&gt;Here's how the standard defines &lt;code&gt;pthread_atfork()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code&gt; int pthread_atfork (void (*prepare) (void), void (*parent) (void), void (*child) (void)); &lt;/code&gt; &lt;/pre&gt; &lt;p&gt;According to the standard, the rationale behind providing this facility appears to be to tackle shortcomings in the semantics of &lt;code&gt;fork()&lt;/code&gt; itself. The standard offers the example of &lt;code&gt;fork()&lt;/code&gt; being called in one thread of a multi-threaded process while another thread is performing some operation and at the same time holding a lock that it expects to release once finished. &lt;code&gt;fork()&lt;/code&gt; only duplicates the calling thread in the child. Any other threads cease to exist in the child process. Therefore, after fork, the mutex remains locked, with no thread left to unlock it. &lt;code&gt;pthread_atfork()&lt;/code&gt; was intended as a solution to this kind of problem.&lt;/p&gt; &lt;p&gt;To quote the rationale from the POSIX standard:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The &lt;code&gt;pthread_atfork()&lt;/code&gt; function was intended to provide multi-threaded libraries with a means to protect themselves from innocent application programs that call &lt;code&gt;fork()&lt;/code&gt;, and to provide multi-threaded application programs with a standard mechanism for protecting themselves from &lt;code&gt;fork()&lt;/code&gt; calls in a library routine or the application itself.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;The expected usage was that the prepare handler would acquire all mutex locks and the other two fork handlers would release them.&lt;/p&gt; &lt;h2&gt;A glibc bug report&lt;/h2&gt; &lt;p&gt;As I mentioned, sometimes interfaces are used in ways that weren't foreseen by the specification (or perhaps the implementation). In May 2019, Jeremy Drake reported a &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=24595"&gt;hang in glibc-2.28 during the execution of a pthread_atfork() handler&lt;/a&gt; when trying to use OpenVPN with a Gnuk smartcard. It was an excellent bug report, in which Jeremy debugged the issue all the way, eventually identifying its root cause.&lt;/p&gt; &lt;p&gt;One of the software components involved (&lt;code&gt;opensc&lt;/code&gt;) had registered a fork handler that &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/dlclose.html"&gt;dlclose()&lt;/a&gt;'d a dynamically loadable module (&lt;code&gt;pcsc-lite&lt;/code&gt;) in the child handler at fork time. Meanwhile, the module itself had registered its own set of fork handlers. Now, &lt;code&gt;dlclose()&lt;/code&gt;'ing a module means that any fork handlers registered by it should not be executed after the dlclose and should therefore implicitly be &lt;em&gt;deregistered&lt;/em&gt;. However, calling &lt;code&gt;dlclose()&lt;/code&gt; during the execution of a fork handler means that while &lt;em&gt;one&lt;/em&gt; handler is &lt;em&gt;running&lt;/em&gt;, another (that has either already been executed or is scheduled to be) needs to be removed from the list and the execution schedule. In other words, the list is modified while it's being walked and executed by the runtime. Depending on how the handler list is implemented/accessed, this can lead to a deadlock. The glibc implementation had been exhibiting the deadlock since release 2.28.&lt;/p&gt; &lt;p&gt;On the one hand, the standard already mentions that calling any non-&lt;a href="https://man7.org/linux/man-pages/man7/signal-safety.7.html"&gt;async-signal-safe&lt;/a&gt; function &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html"&gt;after fork&lt;/a&gt; and before an &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html"&gt;exec&lt;/a&gt; family function leads to undefined behavior. This is what happened in this particular case, so technically, it may be argued that this particular deadlock is not a bug. On the other hand, this had been working prior to release 2.28 and, as per the report, at least one application had made use of it.&lt;/p&gt; &lt;h2&gt;What had changed?&lt;/h2&gt; &lt;p&gt;Upstream glibc releases 2.27 and earlier were immune to this deadlock because of a linked-list based implementation of the fork handler list that used various synchronization primitives: a memory barrier and polling during handler execution, and locks during handler list modification where changes to the list were finalized via atomic operations. In glibc 2.28, a new array-based fork handler implementation was added that, in my opinion, was simpler, easier to reason about, and easier to maintain. In the new implementation, the handler list may only be modified or walked after obtaining a lock. This is what led to the deadlock: &lt;code&gt;fork()&lt;/code&gt; took a lock on the fork handler list during handler execution, and one of the handlers called &lt;code&gt;dlclose()&lt;/code&gt;, which tried to take the same lock in order to de-register a different fork handler that corresponded to the module being &lt;code&gt;dlclose()&lt;/code&gt;'d.&lt;/p&gt; &lt;h2&gt;An underspecified interface?&lt;/h2&gt; &lt;p&gt;While calling &lt;code&gt;dlclose()&lt;/code&gt; in a child handler qualifies as leading to undefined behavior, there are other cases that don't necessarily do so. For example, calling &lt;code&gt;dlclose()&lt;/code&gt; in a prepare or parent handler isn't forbidden by the standard. But it would lead to the same kind of deadlock. On top of that, it's also not explicitly forbidden to call &lt;code&gt;pthread_atfork()&lt;/code&gt; from a fork handler. However, doing so means registering a new handler during handler execution—and another deadlock. In fact, it appears that at &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1888660"&gt;least one of Red Hat's customers ran into this as well&lt;/a&gt;. FreeBSD libc, an entirely separate implementation, also runs into deadlocks under these circumstances. Glancing at the code, it appears that this is because FreeBSD libc quite reasonably also obtains a read-lock on the fork handler list during handler execution, and a write-lock during registration/deregistration. Given that two implementations run into the same issue, it appears that there is a case to be made that the standard should treat this class of use cases and clarify what the expected behavior should be when the execution of a handler causes registration or deregistration of another handler.&lt;/p&gt; &lt;h2&gt;The fix&lt;/h2&gt; &lt;p&gt;The Red Hat Bugzilla report eventually landed on my plate, and with some reading and a lot of advice from seniors on the glibc engineering team here, I began working on a patch. I chose to keep the dynamic array for its clean design, simply releasing the lock just before executing each handler. The idea is that we shouldn't hold implementation locks while executing an external callback. After a few iterations of testing and refining, I &lt;a href="https://sourceware.org/pipermail/libc-alpha/2022-April/138026.html"&gt;posted a patch upstream&lt;/a&gt; to the glibc development mailing list. Adhemerval Zanella, a prolific glibc developer, replied to my email almost immediately with a link to a patch he had been working on that I had overlooked. The test case Adhemerval had included in his patch exposed a hole in my own fix that I was then able to plug. I reworked my patch and included his test, and after another round of patch review from Adhemerval, the patch was &lt;a href="https://sourceware.org/git/?p=glibc.git;a=commit;h=52a103e237329b9f88a28513fe7506ffc3bd8ced"&gt;ready to commit&lt;/a&gt; in time for release 2.36. We backported the fix to 2.34 and 2.35 upstream as well as in &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt; releases 8 and 9.&lt;/p&gt; &lt;h2&gt;What's next?&lt;/h2&gt; &lt;p&gt;Now that the deadlock is gone, there still remain a few open issues. First, there is a race condition where &lt;code&gt;dlclose()&lt;/code&gt; may race with handler execution during &lt;code&gt;fork()&lt;/code&gt;: just after the runtime chooses the next handler to be executed and releases the lock to begin executing the handler, the handler itself may ve deregistered and unmapped by a &lt;code&gt;dlclose()&lt;/code&gt;, leading to a segmentation fault. Next, when it comes to the specification itself, it sounds reasonable to file an issue with the &lt;a href="https://austingroupbugs.net"&gt;Austin Group&lt;/a&gt; asking for clarification regarding calling &lt;code&gt;dlclose()&lt;/code&gt; and &lt;code&gt;pthread_atfork()&lt;/code&gt; from a prepare or parent handler. Another open task is to better document the glibc implementation of &lt;code&gt;pthread_atfork()&lt;/code&gt; and bring it in line with the current implementation. I hope to get around to these as time and priority permit, or perhaps someone else will take them up. The upstream glibc developer community is a helpful and kind one, and we are always happy to welcome new contributors. In this case, the open docs issue is relatively beginner-friendly territory should someone want to get their feet wet.&lt;/p&gt; &lt;p&gt;(Thank you to Adhemerval Zanella, Florian Weimer, Carlos O'Donell, and Siddhesh Poyarekar for review and support.)&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/12/14/how-we-addressed-unforeseen-use-case-pthreadatfork" title="How we addressed an unforeseen use case in pthread_atfork()"&gt;How we addressed an unforeseen use case in pthread_atfork()&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Arjun Shankar</dc:creator><dc:date>2022-12-14T07:00:00Z</dc:date></entry><entry><title>Quarkus 2.15.0.Final released - AWS Lambda SnapStart, new gRPC extension, and a lot more</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-2-15-0-final-released/&#xA;            " /><author><name>Guillaume Smet (https://twitter.com/gsmet_)</name></author><id>https://quarkus.io/blog/quarkus-2-15-0-final-released/</id><updated>2022-12-14T00:00:00Z</updated><published>2022-12-14T00:00:00Z</published><summary type="html">It is our pleasure to announce the release of Quarkus 2.15.0.Final, the last minor release of 2022. As usual, it comes with bugfixes and small enhancements all over the place together with more important changes: Support for AWS Lambda SnapStart Move gRPC extension to new Vert.x gRPC implementation Federation support...</summary><dc:creator>Guillaume Smet (https://twitter.com/gsmet_)</dc:creator><dc:date>2022-12-14T00:00:00Z</dc:date></entry><entry><title type="html">RESTEasy Releases</title><link rel="alternate" href="https://resteasy.github.io/2022/12/13/resteasy-releases/" /><author><name /></author><id>https://resteasy.github.io/2022/12/13/resteasy-releases/</id><updated>2022-12-13T18:11:11Z</updated><dc:creator /></entry></feed>
